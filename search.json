[{"path":"https://gacolitti.github.io/yfinancer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Giovanni Colitti Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gacolitti.github.io/yfinancer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Giovanni Colitti. Author, maintainer, copyright holder.","code":""},{"path":"https://gacolitti.github.io/yfinancer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Colitti G (2025). yfinancer: 'Yahoo Finance' API Wrapper. R package version 0.1.3.9000, https://github.com/gacolitti/yfinancer.","code":"@Manual{,   title = {yfinancer: 'Yahoo Finance' API Wrapper},   author = {Giovanni Colitti},   year = {2025},   note = {R package version 0.1.3.9000},   url = {https://github.com/gacolitti/yfinancer}, }"},{"path":"https://gacolitti.github.io/yfinancer/index.html","id":"yfinancer-","dir":"","previous_headings":"","what":"Yahoo Finance API Wrapper","title":"Yahoo Finance API Wrapper","text":"yfinancer provides access Yahoo Finance’s API, offering functions download historical prices, company information, financial statements.","code":""},{"path":"https://gacolitti.github.io/yfinancer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Yahoo Finance API Wrapper","text":"can install released version yfinancer CRAN : can install development version yfinancer GitHub :","code":"install.packages(\"yfinancer\") # install.packages(\"devtools\") devtools::install_github(\"gacolitti/yfinancer\")"},{"path":[]},{"path":"https://gacolitti.github.io/yfinancer/index.html","id":"working-with-a-single-ticker","dir":"","previous_headings":"Usage Examples","what":"Working with a Single Ticker","title":"Yahoo Finance API Wrapper","text":"","code":"# Get a ticker object for Apple Inc. apple <- get_tickers(\"AAPL\")  # Get historical market data (default: 1 month of daily data) history <- get_history(apple)  # Get 1 year of daily data history_1y <- get_history(apple, period = \"1y\")  # Get 1 month of hourly data history_hourly <- get_history(apple, period = \"1mo\", interval = \"1h\")  # Get data for a custom date range history_custom <- get_history(   apple,    start = \"2022-01-01\",    end = \"2022-12-31\" )  # Get company information info <- get_info(apple)  # Get financial statements # Annual statements (default) income_stmt <- get_income_statement(apple) balance_sheet <- get_balance_sheet(apple) cash_flow <- get_cash_flow(apple)  # Get all financial statements at once financials <- get_financial_statements(apple)  # Quarterly statements quarterly_income <- get_income_statement(apple, freq = \"quarterly\")"},{"path":"https://gacolitti.github.io/yfinancer/index.html","id":"working-with-multiple-tickers","dir":"","previous_headings":"Usage Examples","what":"Working with Multiple Tickers","title":"Yahoo Finance API Wrapper","text":"","code":"# Get multiple tickers tech_tickers <- get_tickers(c(\"AAPL\", \"MSFT\", \"GOOG\"))  # Get historical data for all tickers tech_history <- get_tickers_history(tech_tickers, period = \"1y\")  # Get company information for all tickers tech_info <- get_tickers_info(tech_tickers)"},{"path":"https://gacolitti.github.io/yfinancer/index.html","id":"search-for-tickers","dir":"","previous_headings":"Usage Examples","what":"Search for Tickers","title":"Yahoo Finance API Wrapper","text":"","code":"# Search for companies with \"tech\" in their name tech_search <- search_tickers(\"tech\", limit = 20)  # Search with news results results <- search_tickers(\"Apple\", quotes_only = FALSE) quotes <- results$quotes news <- results$news"},{"path":"https://gacolitti.github.io/yfinancer/index.html","id":"authentication","dir":"","previous_headings":"","what":"Authentication","title":"Yahoo Finance API Wrapper","text":"Yahoo Finance requires two key authentication components API access certain endpoints: A1 Cookie: session cookie identifies session Yahoo Finance Crumb: security token must included request authentication process yfinancer follows steps: Checks YFINANCE_CRUMB YFINANCE_A1 environment variables present, uses values directly environment variables aren’t available, checks existing auth file ~/.yfinance/auth valid auth file exists, uses stored values Gets A1 cookie using curl_chrome110 mimic browser request Uses A1 cookie request crumb Yahoo Finance Stores values ~/.yfinance/auth future use environment variable approach useful : - Avoiding authentication failures automated environments - Testing specific authentication values Currently, get_info() function requires authentication.","code":"# Set environment variables for authentication Sys.setenv(YFINANCE_CRUMB = \"your-crumb-value\") Sys.setenv(YFINANCE_A1 = \"your-a1-cookie-value\")"},{"path":"https://gacolitti.github.io/yfinancer/index.html","id":"core-features-and-components","dir":"","previous_headings":"","what":"Core Features and Components","title":"Yahoo Finance API Wrapper","text":"yfinancer provides access following information: Historical market data (OHLCV) Basic company information Financial statements (income statement, balance sheet, cash flow) Dividends stock splits Options data Analyst recommendations price targets News Company profile asset information Key statistics (PE, EPS, EBITDA, enterprise value, etc.) Financial KPIs (revenue, margins, cash flow metrics) Future earnings dates earnings history ESG scores (environmental, social, governance metrics) Ownership data (insider, institutional, fund) Insider transactions Analyst recommendations upgrade/downgrade history SEC filings (30 different data modules available) Search quotes Get news search","code":""},{"path":"https://gacolitti.github.io/yfinancer/index.html","id":"legal-disclaimer","dir":"","previous_headings":"","what":"Legal Disclaimer","title":"Yahoo Finance API Wrapper","text":"Yahoo!, Y!Finance, Yahoo! Finance registered trademarks Yahoo, Inc. yfinancer affiliated, endorsed, vetted Yahoo, Inc. ’s open-source tool uses Yahoo’s publicly available APIs, intended research educational purposes. Users refer Yahoo!’s terms use details rights use actual data downloaded.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/add_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Add dividends and splits to data frame — add_events","title":"Add dividends and splits to data frame — add_events","text":"Add dividends splits data frame","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/add_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add dividends and splits to data frame — add_events","text":"","code":"add_events(data, chart_result)"},{"path":"https://gacolitti.github.io/yfinancer/reference/apply_adjustments.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply price adjustments to data — apply_adjustments","title":"Apply price adjustments to data — apply_adjustments","text":"Apply price adjustments data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/apply_adjustments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply price adjustments to data — apply_adjustments","text":"","code":"apply_adjustments(data, chart_result, auto_adjust, back_adjust)"},{"path":"https://gacolitti.github.io/yfinancer/reference/as_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Date or POSIXct to Unix timestamp — as_timestamp","title":"Convert Date or POSIXct to Unix timestamp — as_timestamp","text":"Convert Date POSIXct Unix timestamp","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/as_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Date or POSIXct to Unix timestamp — as_timestamp","text":"","code":"as_timestamp(x, default = NULL)"},{"path":"https://gacolitti.github.io/yfinancer/reference/as_timestamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Date or POSIXct to Unix timestamp — as_timestamp","text":"x Date object, POSIXct object, string YYYY-MM-DD HH:MM:SS format default Default value return x NULL","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/as_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Date or POSIXct to Unix timestamp — as_timestamp","text":"Unix timestamp seconds","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/build_history_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Build request parameters for history API — build_history_params","title":"Build request parameters for history API — build_history_params","text":"Build request parameters history API","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/build_history_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build request parameters for history API — build_history_params","text":"","code":"build_history_params(interval, prepost, period, start, end)"},{"path":"https://gacolitti.github.io/yfinancer/reference/capitalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Capitalize first letter of string — capitalize","title":"Capitalize first letter of string — capitalize","text":"Capitalize first letter string","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/capitalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capitalize first letter of string — capitalize","text":"","code":"capitalize(x)"},{"path":"https://gacolitti.github.io/yfinancer/reference/capitalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capitalize first letter of string — capitalize","text":"x String capitalize","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/capitalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capitalize first letter of string — capitalize","text":"String first letter capitalized","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/check_is_lgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a variable is a logical value — check_is_lgl","title":"Check if a variable is a logical value — check_is_lgl","text":"Check variable logical value","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/check_is_lgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a variable is a logical value — check_is_lgl","text":"","code":"check_is_lgl(x)"},{"path":"https://gacolitti.github.io/yfinancer/reference/check_is_lgl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a variable is a logical value — check_is_lgl","text":"x variable check","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/check_is_lgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a variable is a logical value — check_is_lgl","text":"variable x","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/clean_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean table or vector of names — clean_names","title":"Clean table or vector of names — clean_names","text":"Clean table vector names","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/clean_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean table or vector of names — clean_names","text":"","code":"clean_names(.data, unique = FALSE, minus_to_underscore = FALSE)"},{"path":"https://gacolitti.github.io/yfinancer/reference/clean_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean table or vector of names — clean_names","text":".data Data.frame vector column names. unique variable names unique? minus_to_underscore default - replaced minus. argument replaces hyphen _ (underscore) instead.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/clean_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean table or vector of names — clean_names","text":"Returns vector vector data.frame data.frame.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/create_historical_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create historical data frame from chart result — create_historical_df","title":"Create historical data frame from chart result — create_historical_df","text":"Create historical data frame chart result","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/create_historical_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create historical data frame from chart result — create_historical_df","text":"","code":"create_historical_df(chart_result)"},{"path":"https://gacolitti.github.io/yfinancer/reference/extract_chart_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and validate chart data from response — extract_chart_data","title":"Extract and validate chart data from response — extract_chart_data","text":"Extract validate chart data response","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/extract_chart_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and validate chart data from response — extract_chart_data","text":"","code":"extract_chart_data(resp_json)"},{"path":"https://gacolitti.github.io/yfinancer/reference/extract_nested_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a specific field from nested structures — extract_nested_field","title":"Extract a specific field from nested structures — extract_nested_field","text":"Extract specific field nested structures","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/extract_nested_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a specific field from nested structures — extract_nested_field","text":"","code":"extract_nested_field(col_data, field_name, is_numeric = TRUE)"},{"path":"https://gacolitti.github.io/yfinancer/reference/extract_nested_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a specific field from nested structures — extract_nested_field","text":"col_data List column data field_name Field name extract is_numeric Whether field numeric","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/extract_nested_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a specific field from nested structures — extract_nested_field","text":"Vector extracted values","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/extract_validation_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract validation results from Yahoo Finance API response — extract_validation_results","title":"Extract validation results from Yahoo Finance API response — extract_validation_results","text":"Extract validation results Yahoo Finance API response","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/extract_validation_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract validation results from Yahoo Finance API response — extract_validation_results","text":"","code":"extract_validation_results(parsed_response, original_symbols)"},{"path":"https://gacolitti.github.io/yfinancer/reference/extract_validation_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract validation results from Yahoo Finance API response — extract_validation_results","text":"parsed_response parsed JSON response Yahoo Finance original_symbols original symbols requested","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/extract_validation_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract validation results from Yahoo Finance API response — extract_validation_results","text":"tibble validation results","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_a1_cookie.html","id":null,"dir":"Reference","previous_headings":"","what":"Get A1 cookie from Yahoo Finance — get_a1_cookie","title":"Get A1 cookie from Yahoo Finance — get_a1_cookie","text":"Uses curl_chrome110 get A1 cookie Yahoo Finance","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_a1_cookie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get A1 cookie from Yahoo Finance — get_a1_cookie","text":"","code":"get_a1_cookie()"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_a1_cookie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get A1 cookie from Yahoo Finance — get_a1_cookie","text":"A1 cookie string NULL found","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_balance_sheet.html","id":null,"dir":"Reference","previous_headings":"","what":"Get balance sheet for a ticker — get_balance_sheet","title":"Get balance sheet for a ticker — get_balance_sheet","text":"Retrieves balance sheet data Yahoo Finance specified ticker symbol. Balance sheets show company's assets, liabilities, shareholders' equity specific point time.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_balance_sheet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get balance sheet for a ticker — get_balance_sheet","text":"","code":"get_balance_sheet(   ticker,   freq = c(\"annual\", \"quarterly\"),   start = NULL,   end = NULL,   balance_keys = NULL,   pretty = TRUE,   wide = TRUE,   proxy = NULL,   output = c(\"tibble\", \"response\", \"request\") )"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_balance_sheet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get balance sheet for a ticker — get_balance_sheet","text":"ticker ticker object created get_tickers() ticker symbol string freq Frequency data: \"annual\" \"quarterly\" (default \"annual\") start Start timestamp date, datetime, string (default EOY 2016) end End timestamp date, datetime, string (default current timestamp) balance_keys Vector specific balance sheet keys include (default ) See valid_balance_keys available options. pretty Format column names readable (default TRUE) wide Return data wide format dates columns (default TRUE). FALSE, returns data long format date column. proxy Optional proxy settings request output Object return. Can \"tibble\", \"response\", \"request\" (default \"tibble\")","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_balance_sheet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get balance sheet for a ticker — get_balance_sheet","text":"Either tibble balance sheet data, httr2 response object, httr2 request object depending value output argument.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_balance_sheet.html","id":"available-balance-keys","dir":"Reference","previous_headings":"","what":"Available Balance Keys","title":"Get balance sheet for a ticker — get_balance_sheet","text":"Examples: TotalAssets TotalCapitalization CurrentAssets See valid_balance_keys full list available balance keys.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_balance_sheet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get balance sheet for a ticker — get_balance_sheet","text":"","code":"if (FALSE) { # \\dontrun{ apple <- get_tickers(\"AAPL\")  # Get annual balance sheet balance_sheet <- get_balance_sheet(apple)  # Get quarterly balance sheet quarterly_balance <- get_balance_sheet(apple, freq = \"quarterly\")  # Get specific balance sheet items assets_liabilities <- get_balance_sheet(apple,   balance_keys = c(\"TotalAssets\", \"TotalLiabilities\") )  # Get data for a specific time period balance_2020_2022 <- get_balance_sheet(apple,   start = \"2020-01-01\",   end = \"2022-12-31\" ) } # }"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_cashflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cash flow statement for a ticker — get_cashflow","title":"Get cash flow statement for a ticker — get_cashflow","text":"Retrieves cash flow statement data Yahoo Finance specified ticker symbol. Cash flow statements show changes balance sheet accounts income affect cash cash equivalents, breaking analysis operating, investing, financing activities.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_cashflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cash flow statement for a ticker — get_cashflow","text":"","code":"get_cashflow(   ticker,   freq = c(\"annual\", \"quarterly\"),   start = NULL,   end = NULL,   cashflow_keys = NULL,   pretty = TRUE,   wide = TRUE,   proxy = NULL,   output = c(\"tibble\", \"response\", \"request\") )"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_cashflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cash flow statement for a ticker — get_cashflow","text":"ticker ticker object created get_tickers() ticker symbol string freq Frequency data: \"annual\" \"quarterly\" (default \"annual\") start Start timestamp date, datetime, string (default EOY 2016) end End timestamp date, datetime, string (default current timestamp) cashflow_keys Vector specific cash flow statement keys include (default ) See valid_cashflow_keys available options. pretty Format column names readable (default TRUE) wide Return data wide format dates columns (default TRUE). FALSE, returns data long format date column. proxy Optional proxy settings request output Object return. Can \"tibble\", \"response\", \"request\" (default \"tibble\")","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_cashflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cash flow statement for a ticker — get_cashflow","text":"Either tibble cash flow statement data, httr2 response object, httr2 request object depending value output argument.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_cashflow.html","id":"available-cashflow-keys","dir":"Reference","previous_headings":"","what":"Available Cashflow Keys","title":"Get cash flow statement for a ticker — get_cashflow","text":"Examples: OperatingCashFlow FreeCashFlow See valid_cashflow_keys full list available cashflow keys.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_cashflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cash flow statement for a ticker — get_cashflow","text":"","code":"if (FALSE) { # \\dontrun{ apple <- get_tickers(\"AAPL\")  # Get annual cash flow statement cash_flow <- get_cashflow(apple)  # Get quarterly cash flow statement quarterly_cash_flow <- get_cashflow(apple, freq = \"quarterly\")  # Get specific cash flow items operating_cash <- get_cashflow(apple,   cashflow_keys = c(\"OperatingCashFlow\", \"FreeCashFlow\") )  # Get data for a specific time period cash_2020_2022 <- get_cashflow(apple,   start = \"2020-01-01\",   end = \"2022-12-31\" ) } # }"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_crumb.html","id":null,"dir":"Reference","previous_headings":"","what":"Get crumb using A1 cookie — get_crumb","title":"Get crumb using A1 cookie — get_crumb","text":"Get crumb using A1 cookie","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_crumb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get crumb using A1 cookie — get_crumb","text":"","code":"get_crumb(a1_cookie, proxy = NULL)"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_crumb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get crumb using A1 cookie — get_crumb","text":"a1_cookie A1 cookie string proxy Optional proxy settings","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_crumb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get crumb using A1 cookie — get_crumb","text":"Crumb string NULL found","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_financials.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all financial statements for a ticker — get_financials","title":"Get all financial statements for a ticker — get_financials","text":"Retrieves three main financial statements (income statement, balance sheet, cash flow statement) Yahoo Finance specified ticker symbol single call. convenience function calls individual statement functions returns results list.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_financials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all financial statements for a ticker — get_financials","text":"","code":"get_financials(   ticker,   freq = \"annual\",   start = NULL,   end = NULL,   cashflow_keys = NULL,   balance_keys = NULL,   income_keys = NULL,   pretty = TRUE,   wide = TRUE,   proxy = NULL,   output = c(\"tibble\", \"response\", \"request\") )"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_financials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all financial statements for a ticker — get_financials","text":"ticker ticker object created get_tickers() ticker symbol string freq Frequency data: \"annual\" \"quarterly\" (default \"annual\") start Start timestamp date, datetime, string (default EOY 2016) end End timestamp date, datetime, string (default current timestamp) cashflow_keys Vector specific cash flow statement keys include (default ) See valid_cashflow_keys available options. balance_keys Vector specific balance sheet keys include (default ) See valid_balance_keys available options. income_keys Vector specific income statement keys include (default ) See valid_income_keys available options. pretty Format column names readable (default TRUE) wide Return data wide format dates columns (default TRUE). FALSE, returns data long format date column. proxy Optional proxy settings request output Object return. Can \"tibble\", \"response\", \"request\" (default \"tibble\")","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_financials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all financial statements for a ticker — get_financials","text":"list containing three elements: income_statement: Income statement data balance_sheet: Balance sheet data cashflow: Cash flow statement data output \"request\" \"response\", returns list httr2 request response objects instead.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_financials.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get all financial statements for a ticker — get_financials","text":"Note function makes multiple API calls Yahoo Finance. aware potential rate limiting issues making frequent requests. encounter HTTP 429 (Many Requests) errors, consider implementing delay requests using proxy.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_financials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all financial statements for a ticker — get_financials","text":"","code":"if (FALSE) { # \\dontrun{ apple <- get_tickers(\"AAPL\")  # Get all annual financial statements financials <- get_financials(apple)  # Access individual statements from the results income <- financials$income_statement balance <- financials$balance_sheet cashflow <- financials$cashflow  # Get all quarterly financial statements quarterly_financials <- get_financials(apple, freq = \"quarterly\")  # Get financial statements for a specific time period financials_2020_2022 <- get_financials(apple,   start = \"2020-01-01\",   end = \"2022-12-31\" ) } # }"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Get historical market data for a ticker — get_history","title":"Get historical market data for a ticker — get_history","text":"Retrieves historical price data Yahoo Finance specified ticker symbol.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get historical market data for a ticker — get_history","text":"","code":"get_history(   ticker,   period = \"1mo\",   interval = \"1d\",   start = NULL,   end = NULL,   prepost = FALSE,   auto_adjust = TRUE,   back_adjust = TRUE,   repair = TRUE,   proxy = NULL,   output = c(\"tibble\", \"response\", \"request\") )"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get historical market data for a ticker — get_history","text":"ticker ticker name ticker object created get_tickers(). period period download data (default \"1mo\"). Valid values \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\". Ignored start end provided. interval interval data points (default \"1d\"). Valid values \"1m\", \"2m\", \"5m\", \"15m\", \"30m\", \"60m\", \"90m\", \"1h\", \"1d\", \"5d\", \"1wk\", \"1mo\", \"3mo\". start Start time query expressed date, datetime, string YYYY-MM-DD HH:MM:SS format. end End time query expressed date, datetime, string YYYY-MM-DD HH:MM:SS format. prepost Include pre post market data (default FALSE) auto_adjust Adjust OHLC automatically (default TRUE) back_adjust Adjust data reflect splits dividends (default TRUE) repair Repair missing data (default TRUE) proxy Optional proxy settings output Object return. Can \"tibble\", \"response\", \"request\" (default \"tibble\")","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get historical market data for a ticker — get_history","text":"Either tibble historical market data, httr2 response object, httr2 request object depending value output argument.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get historical market data for a ticker — get_history","text":"","code":"if (FALSE) { # \\dontrun{ apple <- get_tickers(\"AAPL\") # Get 1 month of daily data apple_history <- get_history(apple) # Get 1 year of daily data apple_history_1y <- get_history(apple, period = \"1y\") # Get custom date range apple_history_custom <- get_history(   apple,   start = \"2022-01-01\",   end = \"2022-12-31\" ) } # }"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_income_statement.html","id":null,"dir":"Reference","previous_headings":"","what":"Get income statement for a ticker — get_income_statement","title":"Get income statement for a ticker — get_income_statement","text":"Retrieves income statement data Yahoo Finance specified ticker symbol. Income statements show company's revenues, expenses, profits specific period.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_income_statement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get income statement for a ticker — get_income_statement","text":"","code":"get_income_statement(   ticker,   freq = c(\"annual\", \"quarterly\"),   start = NULL,   end = NULL,   income_keys = NULL,   pretty = TRUE,   wide = TRUE,   proxy = NULL,   output = c(\"tibble\", \"response\", \"request\") )"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_income_statement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get income statement for a ticker — get_income_statement","text":"ticker ticker object created get_tickers() ticker symbol string freq Frequency data: \"annual\" \"quarterly\" (default \"annual\") start Start timestamp date, datetime, string (default EOY 2016) end End timestamp date, datetime, string (default current timestamp) income_keys Vector specific income statement keys include (default ) See valid_income_keys available options. pretty Format column names readable (default TRUE) wide Return data wide format dates columns (default TRUE). FALSE, returns data long format date column. proxy Optional proxy settings request output Object return. Can \"tibble\", \"response\", \"request\" (default \"tibble\")","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_income_statement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get income statement for a ticker — get_income_statement","text":"Either tibble income statement data, httr2 response object, httr2 request object depending value output argument.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_income_statement.html","id":"available-income-keys","dir":"Reference","previous_headings":"","what":"Available Income Keys","title":"Get income statement for a ticker — get_income_statement","text":"Examples: TotalRevenue GrossProfit OperatingIncome NetIncome See valid_income_keys full list available income keys.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_income_statement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get income statement for a ticker — get_income_statement","text":"","code":"if (FALSE) { # \\dontrun{ apple <- get_tickers(\"AAPL\")  # Get annual income statement income_stmt <- get_income_statement(apple)  # Get quarterly income statement quarterly_income <- get_income_statement(apple, freq = \"quarterly\")  # Get specific income statement items revenue_income <- get_income_statement(apple,   income_keys = c(\"TotalRevenue\", \"NetIncome\") )  # Get data for a specific time period income_2020_2022 <- get_income_statement(apple,   start = \"2020-01-01\",   end = \"2022-12-31\" ) } # }"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve asset information from Yahoo Finance — get_info","title":"Retrieve asset information from Yahoo Finance — get_info","text":"function retrieves detailed asset information Yahoo Finance's quoteSummary API. can fetch various types data including asset profiles, financial statements, key statistics, . function supports retrieving multiple data modules single request.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve asset information from Yahoo Finance — get_info","text":"","code":"get_info(   ticker,   modules = \"summaryProfile\",   output = c(\"tibble\", \"list\", \"response\", \"request\"),   proxy = NULL )"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve asset information from Yahoo Finance — get_info","text":"ticker ticker name ticker object created get_tickers(). modules Character vector module names retrieve. Default \"summaryProfile\". See section \"Available Modules\" common options. output type output return. Can \"tibble\" (default), \"list\" (raw parsed JSON), \"response\" (httr2 response), \"request\" (httr2 request). proxy Optional proxy settings request.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve asset information from Yahoo Finance — get_info","text":"Depending output parameter number modules requested: single module output=\"tibble\": tibble containing module data multiple modules output=\"tibble\": named list tibbles, one per module output=\"list\": raw parsed JSON data output=\"response\": httr2 response object output=\"request\": httr2 request object","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_info.html","id":"available-modules","dir":"Reference","previous_headings":"","what":"Available Modules","title":"Retrieve asset information from Yahoo Finance — get_info","text":"modules parameter accepts valid module names Yahoo Finance API. Common modules include: \"assetProfile\": Asset overview, description, industry, sector, officers \"summaryProfile\": Brief asset profile information \"financialData\": Key financial metrics ratios \"defaultKeyStatistics\": Important statistics like market cap, P/E ratio \"incomeStatementHistory\": Annual income statements \"incomeStatementHistoryQuarterly\": Quarterly income statements \"balanceSheetHistory\": Annual balance sheets \"balanceSheetHistoryQuarterly\": Quarterly balance sheets \"cashflowStatementHistory\": Annual cash flow statements \"cashflowStatementHistoryQuarterly\": Quarterly cash flow statements See valid_modules complete list available modules.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_info.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Retrieve asset information from Yahoo Finance — get_info","text":"function requires authentication via two components: A1 Cookie: Session identifier Crumb: Security token Authentication methods (order priority): Environment variables: YFINANCE_CRUMB YFINANCE_A1 Saved auth file: ~/.yfinance/auth Auto-generated using curl-impersonate (requires installation) Example:   See https://github.com/lwthiker/curl-impersonate curl-impersonate installation. Option 3 expects curl_chrome110 installed available system path.","code":"Sys.setenv(YFINANCE_CRUMB = \"your-crumb\") Sys.setenv(YFINANCE_A1 = \"your-a1-cookie\")"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve asset information from Yahoo Finance — get_info","text":"","code":"if (FALSE) { # \\dontrun{ # Get a single ticker apple <- get_tickers(\"AAPL\")  # Get summary information # using default module \"summaryProfile\" apple_summary <- get_info(apple)  # Get basic company profile apple_profile <- get_info(apple, modules = \"assetProfile\")  # Get key financial metrics apple_financials <- get_info(apple, modules = \"financialData\")  # Get multiple modules as a list of tibbles apple_data <- get_info(apple,   modules = c(\"incomeStatementHistory\", \"balanceSheetHistory\", \"cashflowStatementHistory\") )  # Access specific financial statements income_statement <- apple_data$incomeStatementHistory balance_sheet <- apple_data$balanceSheetHistory  # Get raw JSON response for custom processing apple_raw <- get_info(apple, modules = \"assetProfile\", output = \"response\") } # }"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Ticker Objects — get_tickers","title":"Get Ticker Objects — get_tickers","text":"Creates one ticker objects accessing data ticker symbols. function handles single multiple ticker symbols validates provided ticker symbols.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Ticker Objects — get_tickers","text":"","code":"get_tickers(..., proxy = NULL)"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Ticker Objects — get_tickers","text":"... One ticker symbols separate arguments (e.g., \"AAPL\", \"MSFT\") proxy Optional proxy settings","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Ticker Objects — get_tickers","text":"single symbol: list containing ticker data methods class \"yf_ticker\" multiple symbols: list containing multiple ticker objects class \"yf_tickers\"","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers.html","id":"rate-limiting","dir":"Reference","previous_headings":"","what":"Rate Limiting","title":"Get Ticker Objects — get_tickers","text":"Yahoo Finance provide official API documentation rate limits. Based community observations, approximate limits hundred requests per day single IP address throttling may occur. working multiple tickers, consider: Batching requests possible Adding delays requests using Sys.sleep() Caching results frequently accessed tickers Using batch functions (e.g., get_tickers_history()) instead individual calls","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Ticker Objects — get_tickers","text":"","code":"if (FALSE) { # \\dontrun{ # Get a single ticker apple <- get_tickers(\"AAPL\")  # Get historical data for a single ticker apple_history <- get_history(apple)  # Get company information for a single ticker apple_info <- get_info(apple)  # Get multiple tickers tech_tickers <- get_tickers(\"AAPL\", \"MSFT\", \"GOOG\")  # Get information for multiple tickers tech_info <- get_tickers_info(tech_tickers)  # Get historical data for multiple tickers tech_history <- get_tickers_history(tech_tickers, period = \"1y\") } # }"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_balance_sheet.html","id":null,"dir":"Reference","previous_headings":"","what":"Get balance sheet for multiple tickers — get_tickers_balance_sheet","title":"Get balance sheet for multiple tickers — get_tickers_balance_sheet","text":"Retrieves balance sheet data Yahoo Finance multiple specified ticker symbols. Balance sheets show company's assets, liabilities, shareholders' equity specific point time.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_balance_sheet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get balance sheet for multiple tickers — get_tickers_balance_sheet","text":"","code":"get_tickers_balance_sheet(   tickers_obj,   freq = c(\"annual\", \"quarterly\"),   start = NULL,   end = NULL,   balance_keys = NULL,   pretty = TRUE,   wide = TRUE,   proxy = NULL,   output = c(\"tibble\", \"response\", \"request\") )"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_balance_sheet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get balance sheet for multiple tickers — get_tickers_balance_sheet","text":"tickers_obj tickers object created get_tickers() freq Frequency data: \"annual\" \"quarterly\" (default \"annual\") start Start timestamp date, datetime, string (default EOY 2016) end End timestamp date, datetime, string (default current timestamp) balance_keys Vector specific balance sheet keys include (default ) See valid_balance_keys available options. pretty Format column names readable (default TRUE) wide Return data wide format dates columns (default TRUE). FALSE, returns data long format date column. proxy Optional proxy settings request output Object return. Can \"tibble\", \"response\", \"request\" (default \"tibble\")","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_balance_sheet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get balance sheet for multiple tickers — get_tickers_balance_sheet","text":"list tibbles balance sheet data ticker","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_balance_sheet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get balance sheet for multiple tickers — get_tickers_balance_sheet","text":"See get_balance_sheet details balance sheet.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_balance_sheet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get balance sheet for multiple tickers — get_tickers_balance_sheet","text":"","code":"if (FALSE) { # \\dontrun{ tech_tickers <- get_tickers(c(\"AAPL\", \"MSFT\", \"GOOG\")) tech_balance <- get_tickers_balance_sheet(tech_tickers) } # }"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_cashflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cash flow statement for multiple tickers — get_tickers_cashflow","title":"Get cash flow statement for multiple tickers — get_tickers_cashflow","text":"Retrieves cash flow statement data Yahoo Finance multiple specified ticker symbols. Cash flow statements show changes balance sheet accounts income affect cash cash equivalents, breaking analysis operating, investing, financing activities.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_cashflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cash flow statement for multiple tickers — get_tickers_cashflow","text":"","code":"get_tickers_cashflow(   tickers_obj,   freq = c(\"annual\", \"quarterly\"),   start = NULL,   end = NULL,   cashflow_keys = NULL,   pretty = TRUE,   wide = TRUE,   proxy = NULL,   output = c(\"tibble\", \"response\", \"request\") )"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_cashflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cash flow statement for multiple tickers — get_tickers_cashflow","text":"tickers_obj tickers object created get_tickers() freq Frequency data: \"annual\" \"quarterly\" (default \"annual\") start Start timestamp date, datetime, string (default EOY 2016) end End timestamp date, datetime, string (default current timestamp) cashflow_keys Vector specific cash flow statement keys include (default ) See valid_cashflow_keys available options. pretty Format column names readable (default TRUE) wide Return data wide format dates columns (default TRUE). FALSE, returns data long format date column. proxy Optional proxy settings request output Object return. Can \"tibble\", \"response\", \"request\" (default \"tibble\")","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_cashflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cash flow statement for multiple tickers — get_tickers_cashflow","text":"list tibbles cash flow statement data ticker","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_cashflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get cash flow statement for multiple tickers — get_tickers_cashflow","text":"See get_cashflow details cash flow statement.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_cashflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cash flow statement for multiple tickers — get_tickers_cashflow","text":"","code":"if (FALSE) { # \\dontrun{ tech_tickers <- get_tickers(c(\"AAPL\", \"MSFT\", \"GOOG\")) tech_cashflow <- get_tickers_cashflow(tech_tickers) } # }"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_financials.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all financial statements for multiple tickers — get_tickers_financials","title":"Get all financial statements for multiple tickers — get_tickers_financials","text":"Get financial statements multiple tickers","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_financials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all financial statements for multiple tickers — get_tickers_financials","text":"","code":"get_tickers_financials(   tickers_obj,   freq = c(\"annual\", \"quarterly\"),   start = NULL,   end = NULL,   cashflow_keys = NULL,   balance_keys = NULL,   income_keys = NULL,   pretty = TRUE,   wide = TRUE,   proxy = NULL,   output = c(\"tibble\", \"response\", \"request\") )"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_financials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all financial statements for multiple tickers — get_tickers_financials","text":"tickers_obj tickers object created get_tickers() freq Frequency data: \"annual\" \"quarterly\" (default \"annual\") start Start timestamp date, datetime, string (default EOY 2016) end End timestamp date, datetime, string (default current timestamp) cashflow_keys Vector specific cash flow statement keys include (default ) See valid_cashflow_keys available options. balance_keys Vector specific balance sheet keys include (default ) See valid_balance_keys available options. income_keys Vector specific income statement keys include (default ) See valid_income_keys available options. pretty Format column names readable (default TRUE) wide Return data wide format dates columns (default TRUE). FALSE, returns data long format date column. proxy Optional proxy settings request output Object return. Can \"tibble\", \"response\", \"request\" (default \"tibble\")","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_financials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all financial statements for multiple tickers — get_tickers_financials","text":"nested list containing financial statements ticker","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_financials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all financial statements for multiple tickers — get_tickers_financials","text":"","code":"if (FALSE) { # \\dontrun{ tech_tickers <- get_tickers(c(\"AAPL\", \"MSFT\", \"GOOG\")) tech_financials <- get_tickers_financials(tech_tickers) } # }"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Get historical data for multiple tickers — get_tickers_history","title":"Get historical data for multiple tickers — get_tickers_history","text":"Retrieves historical market data Yahoo Finance multiple specified ticker symbols.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get historical data for multiple tickers — get_tickers_history","text":"","code":"get_tickers_history(   tickers_obj,   period = \"1mo\",   interval = \"1d\",   start = NULL,   end = NULL,   prepost = FALSE,   auto_adjust = TRUE,   back_adjust = TRUE,   repair = TRUE,   output = c(\"tibble\", \"response\", \"request\"),   proxy = NULL )"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get historical data for multiple tickers — get_tickers_history","text":"tickers_obj tickers object created get_tickers() period period download data (default \"1mo\"). Valid values \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\". Ignored start end provided. interval interval data points (default \"1d\"). Valid values \"1m\", \"2m\", \"5m\", \"15m\", \"30m\", \"60m\", \"90m\", \"1h\", \"1d\", \"5d\", \"1wk\", \"1mo\", \"3mo\". start Start time query expressed date, datetime, string YYYY-MM-DD HH:MM:SS format. end End time query expressed date, datetime, string YYYY-MM-DD HH:MM:SS format. prepost Include pre post market data (default FALSE) auto_adjust Adjust OHLC automatically (default TRUE) back_adjust Adjust data reflect splits dividends (default TRUE) repair Repair missing data (default TRUE) output Object return. Can \"tibble\", \"response\", \"request\" (default \"tibble\") proxy Optional proxy settings","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get historical data for multiple tickers — get_tickers_history","text":"list tibbles historical market data ticker","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_history.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get historical data for multiple tickers — get_tickers_history","text":"See get_history details historical market data.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get historical data for multiple tickers — get_tickers_history","text":"","code":"if (FALSE) { # \\dontrun{ tech_tickers <- get_tickers(c(\"AAPL\", \"MSFT\", \"GOOG\")) tech_history <- get_tickers_history(tech_tickers, period = \"1y\") } # }"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_income_statement.html","id":null,"dir":"Reference","previous_headings":"","what":"Get income statement for multiple tickers — get_tickers_income_statement","title":"Get income statement for multiple tickers — get_tickers_income_statement","text":"Retrieves income statement data Yahoo Finance multiple specified ticker symbols. Income statements show company's revenues, expenses, profits specific period.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_income_statement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get income statement for multiple tickers — get_tickers_income_statement","text":"","code":"get_tickers_income_statement(   tickers_obj,   freq = c(\"annual\", \"quarterly\"),   start = NULL,   end = NULL,   income_keys = NULL,   pretty = TRUE,   wide = TRUE,   proxy = NULL,   output = c(\"tibble\", \"response\", \"request\") )"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_income_statement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get income statement for multiple tickers — get_tickers_income_statement","text":"tickers_obj tickers object created get_tickers() freq Frequency data: \"annual\" \"quarterly\" (default \"annual\") start Start timestamp date, datetime, string (default EOY 2016) end End timestamp date, datetime, string (default current timestamp) income_keys Vector specific income statement keys include (default ) See valid_income_keys available options. pretty Format column names readable (default TRUE) wide Return data wide format dates columns (default TRUE). FALSE, returns data long format date column. proxy Optional proxy settings request output Object return. Can \"tibble\", \"response\", \"request\" (default \"tibble\")","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_income_statement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get income statement for multiple tickers — get_tickers_income_statement","text":"list tibbles income statement data ticker","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_income_statement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get income statement for multiple tickers — get_tickers_income_statement","text":"See get_income_statement details income statement.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_income_statement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get income statement for multiple tickers — get_tickers_income_statement","text":"","code":"if (FALSE) { # \\dontrun{ tech_tickers <- get_tickers(c(\"AAPL\", \"MSFT\", \"GOOG\")) tech_income <- get_tickers_income_statement(tech_tickers) } # }"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information for multiple tickers — get_tickers_info","title":"Get information for multiple tickers — get_tickers_info","text":"Retrieves company information Yahoo Finance multiple specified ticker symbols.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information for multiple tickers — get_tickers_info","text":"","code":"get_tickers_info(   tickers_obj,   modules = \"summaryProfile\",   output = c(\"tibble\", \"response\", \"request\"),   proxy = NULL )"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information for multiple tickers — get_tickers_info","text":"tickers_obj tickers object created get_tickers() modules Character vector module names retrieve. Default \"summaryProfile\". See section \"Available Modules\" common options. output type output return. Can \"tibble\" (default), \"list\" (raw parsed JSON), \"response\" (httr2 response), \"request\" (httr2 request). proxy Optional proxy settings request.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information for multiple tickers — get_tickers_info","text":"list information ticker","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get information for multiple tickers — get_tickers_info","text":"See get_info details company information.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_tickers_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information for multiple tickers — get_tickers_info","text":"","code":"if (FALSE) { # \\dontrun{ tech_tickers <- get_tickers(c(\"AAPL\", \"MSFT\", \"GOOG\")) tech_info <- get_tickers_info(tech_tickers) } # }"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_user_agent.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a random user agent — get_user_agent","title":"Get a random user agent — get_user_agent","text":"Get random user agent","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/get_user_agent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a random user agent — get_user_agent","text":"","code":"get_user_agent()"},{"path":"https://gacolitti.github.io/yfinancer/reference/get_user_agent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a random user agent — get_user_agent","text":"character string random user agent","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/has_nested_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a column contains nested structures with specific fields — has_nested_structure","title":"Check if a column contains nested structures with specific fields — has_nested_structure","text":"Check column contains nested structures specific fields","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/has_nested_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a column contains nested structures with specific fields — has_nested_structure","text":"","code":"has_nested_structure(col_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/has_nested_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a column contains nested structures with specific fields — has_nested_structure","text":"col_data List column data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/has_nested_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a column contains nested structures with specific fields — has_nested_structure","text":"Boolean indicating column contains nested structures","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/null-coalesce-operator.html","id":null,"dir":"Reference","previous_headings":"","what":"Null coalescing operator — null-coalesce-operator","title":"Null coalescing operator — null-coalesce-operator","text":"Null coalescing operator","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/null-coalesce-operator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Null coalescing operator — null-coalesce-operator","text":"","code":"x %||% y"},{"path":"https://gacolitti.github.io/yfinancer/reference/null-coalesce-operator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Null coalescing operator — null-coalesce-operator","text":"x First value y Fallback value x NULL","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/null-coalesce-operator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Null coalescing operator — null-coalesce-operator","text":"x NULL, otherwise y","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_asset_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse asset profile module data from Yahoo Finance API — parse_asset_profile","title":"Parse asset profile module data from Yahoo Finance API — parse_asset_profile","text":"Transforms nested asset profile data Yahoo Finance API tidy tibble. includes company information industry, sector, description, address, company officers.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_asset_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse asset profile module data from Yahoo Finance API — parse_asset_profile","text":"","code":"parse_asset_profile(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_asset_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse asset profile module data from Yahoo Finance API — parse_asset_profile","text":"result_data raw asset profile data Yahoo Finance API","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_asset_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse asset profile module data from Yahoo Finance API — parse_asset_profile","text":"tibble containing parsed asset profile data nested company officers data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_balance_sheet.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse balance sheet module data from Yahoo Finance API — parse_balance_sheet","title":"Parse balance sheet module data from Yahoo Finance API — parse_balance_sheet","text":"Transforms nested balance sheet data Yahoo Finance API tidy tibble. function handles annual quarterly balance sheet statements.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_balance_sheet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse balance sheet module data from Yahoo Finance API — parse_balance_sheet","text":"","code":"parse_balance_sheet(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_balance_sheet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse balance sheet module data from Yahoo Finance API — parse_balance_sheet","text":"result_data raw balance sheet data Yahoo Finance API","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_balance_sheet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse balance sheet module data from Yahoo Finance API — parse_balance_sheet","text":"tibble containing parsed balance sheet data financial metrics","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_calendar_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse calendar events module data — parse_calendar_events","title":"Parse calendar events module data — parse_calendar_events","text":"Parse calendar events module data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_calendar_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse calendar events module data — parse_calendar_events","text":"","code":"parse_calendar_events(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_calendar_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse calendar events module data — parse_calendar_events","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_calendar_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse calendar events module data — parse_calendar_events","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_cashflow_statement.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse cash flow statement module data from Yahoo Finance API — parse_cashflow_statement","title":"Parse cash flow statement module data from Yahoo Finance API — parse_cashflow_statement","text":"Transforms nested cash flow statement data Yahoo Finance API tidy tibble. function handles annual quarterly cash flow statements.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_cashflow_statement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse cash flow statement module data from Yahoo Finance API — parse_cashflow_statement","text":"","code":"parse_cashflow_statement(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_cashflow_statement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse cash flow statement module data from Yahoo Finance API — parse_cashflow_statement","text":"result_data raw cash flow statement data Yahoo Finance API","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_cashflow_statement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse cash flow statement module data from Yahoo Finance API — parse_cashflow_statement","text":"tibble containing parsed cash flow data financial metrics","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_default_key_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse default key statistics module data — parse_default_key_statistics","title":"Parse default key statistics module data — parse_default_key_statistics","text":"Parse default key statistics module data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_default_key_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse default key statistics module data — parse_default_key_statistics","text":"","code":"parse_default_key_statistics(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_default_key_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse default key statistics module data — parse_default_key_statistics","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_default_key_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse default key statistics module data — parse_default_key_statistics","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_earnings.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse earnings module data — parse_earnings","title":"Parse earnings module data — parse_earnings","text":"Parse earnings module data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_earnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse earnings module data — parse_earnings","text":"","code":"parse_earnings(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_earnings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse earnings module data — parse_earnings","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_earnings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse earnings module data — parse_earnings","text":"list tibbles parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_earnings_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse earnings history module data — parse_earnings_history","title":"Parse earnings history module data — parse_earnings_history","text":"Parse earnings history module data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_earnings_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse earnings history module data — parse_earnings_history","text":"","code":"parse_earnings_history(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_earnings_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse earnings history module data — parse_earnings_history","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_earnings_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse earnings history module data — parse_earnings_history","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_earnings_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse earnings trend module data — parse_earnings_trend","title":"Parse earnings trend module data — parse_earnings_trend","text":"Parse earnings trend module data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_earnings_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse earnings trend module data — parse_earnings_trend","text":"","code":"parse_earnings_trend(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_earnings_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse earnings trend module data — parse_earnings_trend","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_earnings_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse earnings trend module data — parse_earnings_trend","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_esg_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse ESG scores module data — parse_esg_scores","title":"Parse ESG scores module data — parse_esg_scores","text":"Parse ESG scores module data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_esg_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse ESG scores module data — parse_esg_scores","text":"","code":"parse_esg_scores(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_esg_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse ESG scores module data — parse_esg_scores","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_esg_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse ESG scores module data — parse_esg_scores","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_fund_ownership.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse fund ownership module data — parse_fund_ownership","title":"Parse fund ownership module data — parse_fund_ownership","text":"Parse fund ownership module data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_fund_ownership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse fund ownership module data — parse_fund_ownership","text":"","code":"parse_fund_ownership(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_fund_ownership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse fund ownership module data — parse_fund_ownership","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_fund_ownership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse fund ownership module data — parse_fund_ownership","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_fund_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse fund profile module data — parse_fund_profile","title":"Parse fund profile module data — parse_fund_profile","text":"Parse fund profile module data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_fund_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse fund profile module data — parse_fund_profile","text":"","code":"parse_fund_profile(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_fund_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse fund profile module data — parse_fund_profile","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_fund_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse fund profile module data — parse_fund_profile","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_futures_chain.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse futures chain module data — parse_futures_chain","title":"Parse futures chain module data — parse_futures_chain","text":"Parse futures chain module data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_futures_chain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse futures chain module data — parse_futures_chain","text":"","code":"parse_futures_chain(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_futures_chain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse futures chain module data — parse_futures_chain","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_futures_chain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse futures chain module data — parse_futures_chain","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_generic_module.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse generic module data that requires simple unnesting — parse_generic_module","title":"Parse generic module data that requires simple unnesting — parse_generic_module","text":"Parse generic module data requires simple unnesting","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_generic_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse generic module data that requires simple unnesting — parse_generic_module","text":"","code":"parse_generic_module(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_generic_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse generic module data that requires simple unnesting — parse_generic_module","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_generic_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse generic module data that requires simple unnesting — parse_generic_module","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_income_statement.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse income statement module data from Yahoo Finance API — parse_income_statement","title":"Parse income statement module data from Yahoo Finance API — parse_income_statement","text":"Transforms nested income statement data Yahoo Finance API tidy tibble. function handles annual quarterly income statements, extracting key financial metrics like revenue, expenses, earnings.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_income_statement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse income statement module data from Yahoo Finance API — parse_income_statement","text":"","code":"parse_income_statement(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_income_statement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse income statement module data from Yahoo Finance API — parse_income_statement","text":"result_data raw income statement data Yahoo Finance API","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_income_statement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse income statement module data from Yahoo Finance API — parse_income_statement","text":"tibble containing parsed income statement data financial metrics","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_index_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse index trend module data — parse_index_trend","title":"Parse index trend module data — parse_index_trend","text":"Parse index trend module data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_index_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse index trend module data — parse_index_trend","text":"","code":"parse_index_trend(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_index_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse index trend module data — parse_index_trend","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_index_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse index trend module data — parse_index_trend","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_insider_holders.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse insider holders module data — parse_insider_holders","title":"Parse insider holders module data — parse_insider_holders","text":"Parse insider holders module data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_insider_holders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse insider holders module data — parse_insider_holders","text":"","code":"parse_insider_holders(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_insider_holders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse insider holders module data — parse_insider_holders","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_insider_holders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse insider holders module data — parse_insider_holders","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_insider_transactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse insider transactions module data — parse_insider_transactions","title":"Parse insider transactions module data — parse_insider_transactions","text":"Parse insider transactions module data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_insider_transactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse insider transactions module data — parse_insider_transactions","text":"","code":"parse_insider_transactions(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_insider_transactions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse insider transactions module data — parse_insider_transactions","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_insider_transactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse insider transactions module data — parse_insider_transactions","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_institution_ownership.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse institution ownership module data — parse_institution_ownership","title":"Parse institution ownership module data — parse_institution_ownership","text":"Parse institution ownership module data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_institution_ownership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse institution ownership module data — parse_institution_ownership","text":"","code":"parse_institution_ownership(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_institution_ownership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse institution ownership module data — parse_institution_ownership","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_institution_ownership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse institution ownership module data — parse_institution_ownership","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_module_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a module's data into a tidy tibble format — parse_module_data","title":"Parse a module's data into a tidy tibble format — parse_module_data","text":"main dispatcher function routes Yahoo Finance API module appropriate parsing function. uses dispatch table determine specialized parser use based module name.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_module_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a module's data into a tidy tibble format — parse_module_data","text":"","code":"parse_module_data(result_data, module_name)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_module_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a module's data into a tidy tibble format — parse_module_data","text":"result_data raw result data Yahoo Finance API module_name name module parse (e.g., \"assetProfile\", \"incomeStatementHistory\")","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_module_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a module's data into a tidy tibble format — parse_module_data","text":"tibble containing parsed data specific module type","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_ownership_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse ownership data module — parse_ownership_data","title":"Parse ownership data module — parse_ownership_data","text":"Parse ownership data module","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_ownership_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse ownership data module — parse_ownership_data","text":"","code":"parse_ownership_data(result_data, list_field = \"ownershipList\")"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_ownership_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse ownership data module — parse_ownership_data","text":"result_data data parse list_field field containing list ownership data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_ownership_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse ownership data module — parse_ownership_data","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_recommendation_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse recommendation trend module data — parse_recommendation_trend","title":"Parse recommendation trend module data — parse_recommendation_trend","text":"Parse recommendation trend module data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_recommendation_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse recommendation trend module data — parse_recommendation_trend","text":"","code":"parse_recommendation_trend(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_recommendation_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse recommendation trend module data — parse_recommendation_trend","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_recommendation_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse recommendation trend module data — parse_recommendation_trend","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_sec_filings.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse SEC filings module data — parse_sec_filings","title":"Parse SEC filings module data — parse_sec_filings","text":"Parse SEC filings module data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_sec_filings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse SEC filings module data — parse_sec_filings","text":"","code":"parse_sec_filings(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_sec_filings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse SEC filings module data — parse_sec_filings","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_sec_filings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse SEC filings module data — parse_sec_filings","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_ticker_symbols.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Ticker Symbols — parse_ticker_symbols","title":"Parse Ticker Symbols — parse_ticker_symbols","text":"Parse Ticker Symbols","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_ticker_symbols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Ticker Symbols — parse_ticker_symbols","text":"","code":"parse_ticker_symbols(symbols)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_ticker_symbols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Ticker Symbols — parse_ticker_symbols","text":"symbols character vector ticker symbols","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_ticker_symbols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Ticker Symbols — parse_ticker_symbols","text":"character vector parsed ticker symbols","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_up_down_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse upgrade downgrade history module data — parse_up_down_history","title":"Parse upgrade downgrade history module data — parse_up_down_history","text":"Parse upgrade downgrade history module data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_up_down_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse upgrade downgrade history module data — parse_up_down_history","text":"","code":"parse_up_down_history(result_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_up_down_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse upgrade downgrade history module data — parse_up_down_history","text":"result_data data parse","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/parse_up_down_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse upgrade downgrade history module data — parse_up_down_history","text":"tibble parsed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/print.yf_ticker.html","id":null,"dir":"Reference","previous_headings":"","what":"Format ticker object print output — print.yf_ticker","title":"Format ticker object print output — print.yf_ticker","text":"Format ticker object print output","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/print.yf_ticker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format ticker object print output — print.yf_ticker","text":"","code":"# S3 method for class 'yf_ticker' print(x, ...)"},{"path":"https://gacolitti.github.io/yfinancer/reference/print.yf_ticker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format ticker object print output — print.yf_ticker","text":"x ticker object ... Additional arguments passed print","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/print.yf_ticker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format ticker object print output — print.yf_ticker","text":"ticker object (invisibly)","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/print.yf_tickers.html","id":null,"dir":"Reference","previous_headings":"","what":"Format tickers object print output — print.yf_tickers","title":"Format tickers object print output — print.yf_tickers","text":"Format tickers object print output","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/print.yf_tickers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format tickers object print output — print.yf_tickers","text":"","code":"# S3 method for class 'yf_tickers' print(x, ...)"},{"path":"https://gacolitti.github.io/yfinancer/reference/print.yf_tickers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format tickers object print output — print.yf_tickers","text":"x tickers object ... Additional arguments passed print","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/print.yf_tickers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format tickers object print output — print.yf_tickers","text":"tickers object (invisibly)","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_calendar_earnings.html","id":null,"dir":"Reference","previous_headings":"","what":"Process earnings data in calendar events — process_calendar_earnings","title":"Process earnings data in calendar events — process_calendar_earnings","text":"Process earnings data calendar events","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_calendar_earnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process earnings data in calendar events — process_calendar_earnings","text":"","code":"process_calendar_earnings(tbl, earnings_data)"},{"path":"https://gacolitti.github.io/yfinancer/reference/process_calendar_earnings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process earnings data in calendar events — process_calendar_earnings","text":"tbl tibble update earnings_data earnings data process","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_calendar_earnings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process earnings data in calendar events — process_calendar_earnings","text":"Updated tibble processed earnings data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_calendar_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a nested field and add it to the tibble — process_calendar_field","title":"Process a nested field and add it to the tibble — process_calendar_field","text":"Process nested field add tibble","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_calendar_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a nested field and add it to the tibble — process_calendar_field","text":"","code":"process_calendar_field(tbl, field_data, prefix, is_array = FALSE, index = NULL)"},{"path":"https://gacolitti.github.io/yfinancer/reference/process_calendar_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a nested field and add it to the tibble — process_calendar_field","text":"tbl tibble update field_data nested field data prefix prefix use column names is_array Whether field array (TRUE) single value (FALSE) index Optional index array elements","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_calendar_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a nested field and add it to the tibble — process_calendar_field","text":"Updated tibble processed field data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_chart_quarterly.html","id":null,"dir":"Reference","previous_headings":"","what":"Process quarterly data from earnings or financials chart — process_chart_quarterly","title":"Process quarterly data from earnings or financials chart — process_chart_quarterly","text":"Process quarterly data earnings financials chart","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_chart_quarterly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process quarterly data from earnings or financials chart — process_chart_quarterly","text":"","code":"process_chart_quarterly(   chart_data,   field_name,   result_name,   result_tibbles = list() )"},{"path":"https://gacolitti.github.io/yfinancer/reference/process_chart_quarterly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process quarterly data from earnings or financials chart — process_chart_quarterly","text":"chart_data chart data containing quarterly information field_name field name extract chart data result_name name use result tibbles list result_tibbles list result tibbles update","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_chart_quarterly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process quarterly data from earnings or financials chart — process_chart_quarterly","text":"Updated result_tibbles list processed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_current_quarter.html","id":null,"dir":"Reference","previous_headings":"","what":"Process current quarter estimate data — process_current_quarter","title":"Process current quarter estimate data — process_current_quarter","text":"Process current quarter estimate data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_current_quarter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process current quarter estimate data — process_current_quarter","text":"","code":"process_current_quarter(earnings_chart, result_tibbles = list())"},{"path":"https://gacolitti.github.io/yfinancer/reference/process_current_quarter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process current quarter estimate data — process_current_quarter","text":"earnings_chart earnings chart data result_tibbles list result tibbles update","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_current_quarter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process current quarter estimate data — process_current_quarter","text":"Updated result_tibbles list processed data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_earnings_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Process metadata from earnings data — process_earnings_metadata","title":"Process metadata from earnings data — process_earnings_metadata","text":"Process metadata earnings data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_earnings_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process metadata from earnings data — process_earnings_metadata","text":"","code":"process_earnings_metadata(base_tbl, result_tibbles = list())"},{"path":"https://gacolitti.github.io/yfinancer/reference/process_earnings_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process metadata from earnings data — process_earnings_metadata","text":"base_tbl base tibble containing metadata result_tibbles list result tibbles update","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_earnings_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process metadata from earnings data — process_earnings_metadata","text":"Updated result_tibbles list metadata","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_nested_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Process nested columns in a tibble — process_nested_cols","title":"Process nested columns in a tibble — process_nested_cols","text":"Process nested columns tibble","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_nested_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process nested columns in a tibble — process_nested_cols","text":"","code":"process_nested_cols(tibble, prefix = NULL)"},{"path":"https://gacolitti.github.io/yfinancer/reference/process_nested_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process nested columns in a tibble — process_nested_cols","text":"tibble tibble potentially containing nested column structures like format/raw/longFmt pairs min/avg/max values prefix Optional prefix created columns. NULL, uses column name followed appropriate suffix (Raw, Fmt, LongFmt, Min, Avg, Max)","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_nested_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process nested columns in a tibble — process_nested_cols","text":"processed tibble nested structures appropriately unnested","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_nested_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a single nested column — process_nested_column","title":"Process a single nested column — process_nested_column","text":"Process single nested column","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_nested_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a single nested column — process_nested_column","text":"","code":"process_nested_column(tibble, col, col_prefix)"},{"path":"https://gacolitti.github.io/yfinancer/reference/process_nested_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a single nested column — process_nested_column","text":"tibble tibble containing column col column name col_prefix Prefix use new columns","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_nested_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a single nested column — process_nested_column","text":"Updated tibble processed column","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_timeseries_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process timeseries data from the fundamentals-timeseries endpoint — process_timeseries_data","title":"Process timeseries data from the fundamentals-timeseries endpoint — process_timeseries_data","text":"Process timeseries data fundamentals-timeseries endpoint","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_timeseries_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process timeseries data from the fundamentals-timeseries endpoint — process_timeseries_data","text":"","code":"process_timeseries_data(result_data, pretty = TRUE, wide = TRUE)"},{"path":"https://gacolitti.github.io/yfinancer/reference/process_timeseries_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process timeseries data from the fundamentals-timeseries endpoint — process_timeseries_data","text":"result_data List timeseries results pretty Format column names readable (default TRUE) wide Return data wide format dates columns (default TRUE). FALSE, returns data long format date column.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_timeseries_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process timeseries data from the fundamentals-timeseries endpoint — process_timeseries_data","text":"tidy tibble processed timeseries data","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_timestamp_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Timestamp Argument Converts a character string, timestamp, or date to a unix timestamp — process_timestamp_arg","title":"Process Timestamp Argument Converts a character string, timestamp, or date to a unix timestamp — process_timestamp_arg","text":"Process Timestamp Argument Converts character string, timestamp, date unix timestamp","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_timestamp_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Timestamp Argument Converts a character string, timestamp, or date to a unix timestamp — process_timestamp_arg","text":"","code":"process_timestamp_arg(timestamp = NULL, default = NULL)"},{"path":"https://gacolitti.github.io/yfinancer/reference/process_timestamp_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Timestamp Argument Converts a character string, timestamp, or date to a unix timestamp — process_timestamp_arg","text":"timestamp character string can converted unix timestamp, timestamp, date default default value return timestamp NULL","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/process_timestamp_arg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Timestamp Argument Converts a character string, timestamp, or date to a unix timestamp — process_timestamp_arg","text":"unix timestamp. Default current time.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/read_auth_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Auth File — read_auth_file","title":"Read Auth File — read_auth_file","text":"Read Auth File","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/read_auth_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Auth File — read_auth_file","text":"","code":"read_auth_file(path = NULL, refresh = FALSE)"},{"path":"https://gacolitti.github.io/yfinancer/reference/read_auth_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Auth File — read_auth_file","text":"path Path authentication file refresh Whether refresh auth file","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/repair_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Repair missing data in time series — repair_data","title":"Repair missing data in time series — repair_data","text":"Repair missing data time series","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/repair_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repair missing data in time series — repair_data","text":"","code":"repair_data(data, repair = TRUE)"},{"path":"https://gacolitti.github.io/yfinancer/reference/req_add_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Yahoo Finance authentication (crumb) — req_add_auth","title":"Get Yahoo Finance authentication (crumb) — req_add_auth","text":"Tries multiple methods get crumb: Check YFINANCE_CRUMB YFINANCE_A1 environment variables environment variables available, get auth ~/.yfinance/auth file","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/req_add_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Yahoo Finance authentication (crumb) — req_add_auth","text":"","code":"req_add_auth(req, proxy = NULL, refresh = FALSE, path = NULL)"},{"path":"https://gacolitti.github.io/yfinancer/reference/req_add_auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Yahoo Finance authentication (crumb) — req_add_auth","text":"req Request object proxy Optional proxy settings refresh Logical. TRUE, force refresh crumb. path Path authentication file. Default ~/.yfinance/auth","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/req_add_auth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Yahoo Finance authentication (crumb) — req_add_auth","text":"Request object added authentication","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/req_add_headers.html","id":null,"dir":"Reference","previous_headings":"","what":"Add headers to a request — req_add_headers","title":"Add headers to a request — req_add_headers","text":"Add headers request","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/req_add_headers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add headers to a request — req_add_headers","text":"","code":"req_add_headers(req)"},{"path":"https://gacolitti.github.io/yfinancer/reference/req_add_headers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add headers to a request — req_add_headers","text":"req Request object","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/req_add_headers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add headers to a request — req_add_headers","text":"Request object added headers","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/search_tickers.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for ticker symbols, companies, and news from Yahoo Finance — search_tickers","title":"Search for ticker symbols, companies, and news from Yahoo Finance — search_tickers","text":"function allows search ticker symbols, companies, ETFs, etc. using Yahoo Finance search API. can also return related news articles. search functionality particularly useful discovering ticker symbols know company name part .","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/search_tickers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for ticker symbols, companies, and news from Yahoo Finance — search_tickers","text":"","code":"search_tickers(   query,   limit = 10,   quotes_only = TRUE,   fuzzy_query = FALSE,   lists_count = 0,   enable_research = FALSE,   proxy = NULL,   output = c(\"tibble\", \"response\", \"request\", \"all\") )"},{"path":"https://gacolitti.github.io/yfinancer/reference/search_tickers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for ticker symbols, companies, and news from Yahoo Finance — search_tickers","text":"query Search query string limit Maximum number results return (default 10) quotes_only Return quotes/tickers, news (default TRUE) fuzzy_query Enable fuzzy search typos (default FALSE) lists_count Number lists retrieve (default 0) enable_research Include research reports (default FALSE) proxy Optional proxy settings output Object return. Can \"tibble\", \"response\", \"request\", \"\" (default \"tibble\")","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/search_tickers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for ticker symbols, companies, and news from Yahoo Finance — search_tickers","text":"Depending output parameter: \"tibble\": quotes data (list quotes news quotes_only FALSE) \"response\": raw response API \"request\": request object \"\": named list containing results: quotes, news, lists, research, raw response","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/search_tickers.html","id":"rate-limiting","dir":"Reference","previous_headings":"","what":"Rate Limiting","title":"Search for ticker symbols, companies, and news from Yahoo Finance — search_tickers","text":"Yahoo Finance provide official API documentation rate limits. Based community observations, search queries may heavily rate-limited endpoints. avoid rate limiting: Limit frequency search requests Cache search results possible Consider adding delays requests (e.g., using Sys.sleep()) Use specific search queries reduce number needed requests","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/search_tickers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for ticker symbols, companies, and news from Yahoo Finance — search_tickers","text":"","code":"if (FALSE) { # \\dontrun{ # Search for Apple apple_results <- search_tickers(\"Apple\")  # Search for tech companies with more results tech_results <- search_tickers(\"tech\", limit = 20)  # Get both quotes and news articles apple_with_news <- search_tickers(\"Apple\", quotes_only = FALSE)  # Get all data including lists and research reports all_apple_data <- search_tickers(   \"Apple\",   quotes_only = FALSE,   lists_count = 5,   enable_research = TRUE,   output = \"all\" ) } # }"},{"path":"https://gacolitti.github.io/yfinancer/reference/should_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Control message frequency — should_message","title":"Control message frequency — should_message","text":"Shows message every interval hours","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/should_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control message frequency — should_message","text":"","code":"should_message(msg, interval = 8, timestamp_file = NULL)"},{"path":"https://gacolitti.github.io/yfinancer/reference/should_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control message frequency — should_message","text":"msg message display interval Time interval hours showing messages timestamp_file Name used ID timestamp file (defaults tempfile)","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/should_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control message frequency — should_message","text":"NULL invisibly","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/unix_to_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Unix timestamp to datetime — unix_to_datetime","title":"Convert Unix timestamp to datetime — unix_to_datetime","text":"Convert Unix timestamp datetime","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/unix_to_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Unix timestamp to datetime — unix_to_datetime","text":"","code":"unix_to_datetime(timestamp)"},{"path":"https://gacolitti.github.io/yfinancer/reference/unix_to_datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Unix timestamp to datetime — unix_to_datetime","text":"timestamp Unix timestamp seconds (can vector)","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/unix_to_datetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Unix timestamp to datetime — unix_to_datetime","text":"POSIXct object vector POSIXct objects","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/user_agents.html","id":null,"dir":"Reference","previous_headings":"","what":"Static user agents for yfinance package — user_agents","title":"Static user agents for yfinance package — user_agents","text":"Static user agents yfinance package","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/user_agents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Static user agents for yfinance package — user_agents","text":"","code":"user_agents"},{"path":"https://gacolitti.github.io/yfinancer/reference/user_agents.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Static user agents for yfinance package — user_agents","text":"object class character length 8.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_balance_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Data file containing possible balance sheet keys from Yahoo Finance API — valid_balance_keys","title":"Data file containing possible balance sheet keys from Yahoo Finance API — valid_balance_keys","text":"dataset containing possible keys can found balance sheet data retrieved Yahoo Finance's API. keys used identify extract specific balance sheet line items.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_balance_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data file containing possible balance sheet keys from Yahoo Finance API — valid_balance_keys","text":"","code":"valid_balance_keys"},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_balance_keys.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data file containing possible balance sheet keys from Yahoo Finance API — valid_balance_keys","text":"character vector containing 147 possible balance sheet keys","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_balance_keys.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data file containing possible balance sheet keys from Yahoo Finance API — valid_balance_keys","text":"Yahoo Finance API","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_balance_keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data file containing possible balance sheet keys from Yahoo Finance API — valid_balance_keys","text":"","code":"# View all possible balance sheet keys data(valid_balance_keys) head(valid_balance_keys) #> [1] \"AccountsPayable\"                        #> [2] \"AccumulatedDepreciation\"                #> [3] \"AdditionalPaidInCapital\"                #> [4] \"AllowanceForDoubtfulAccountsReceivable\" #> [5] \"AssetsHeldForSaleCurrent\"               #> [6] \"AvailableForSaleSecurities\"              # Check if a specific key exists \"TotalAssets\" %in% valid_balance_keys #> [1] TRUE"},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_cashflow_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Data file containing possible cash flow statement keys from Yahoo Finance API — valid_cashflow_keys","title":"Data file containing possible cash flow statement keys from Yahoo Finance API — valid_cashflow_keys","text":"dataset containing possible keys can found cash flow statement data retrieved Yahoo Finance's API. keys used identify extract specific cash flow line items.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_cashflow_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data file containing possible cash flow statement keys from Yahoo Finance API — valid_cashflow_keys","text":"","code":"valid_cashflow_keys"},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_cashflow_keys.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data file containing possible cash flow statement keys from Yahoo Finance API — valid_cashflow_keys","text":"character vector containing 131 possible cash flow statement keys","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_cashflow_keys.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data file containing possible cash flow statement keys from Yahoo Finance API — valid_cashflow_keys","text":"Yahoo Finance API","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_cashflow_keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data file containing possible cash flow statement keys from Yahoo Finance API — valid_cashflow_keys","text":"","code":"# View all possible cash flow keys data(valid_cashflow_keys) head(valid_cashflow_keys) #> [1] \"AdjustedGeographySegmentData\" \"AmortizationCashFlow\"         #> [3] \"AmortizationOfIntangibles\"    \"AmortizationOfSecurities\"     #> [5] \"AssetImpairmentCharge\"        \"BeginningCashPosition\"         # Check if a specific key exists \"OperatingCashFlow\" %in% valid_cashflow_keys #> [1] TRUE"},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_income_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Data file containing possible income statement keys from Yahoo Finance API — valid_income_keys","title":"Data file containing possible income statement keys from Yahoo Finance API — valid_income_keys","text":"dataset containing possible keys can found income statement data retrieved Yahoo Finance's API. keys used identify extract specific income statement line items.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_income_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data file containing possible income statement keys from Yahoo Finance API — valid_income_keys","text":"","code":"valid_income_keys"},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_income_keys.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data file containing possible income statement keys from Yahoo Finance API — valid_income_keys","text":"character vector containing 103 possible income statement keys","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_income_keys.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data file containing possible income statement keys from Yahoo Finance API — valid_income_keys","text":"Yahoo Finance API","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_income_keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data file containing possible income statement keys from Yahoo Finance API — valid_income_keys","text":"","code":"# View all possible income statement keys data(valid_income_keys) head(valid_income_keys) #> [1] \"Amortization\"                             #> [2] \"AmortizationOfIntangiblesIncomeStatement\" #> [3] \"AverageDilutionEarnings\"                  #> [4] \"BasicAccountingChange\"                    #> [5] \"BasicAverageShares\"                       #> [6] \"BasicContinuousOperations\"                 # Check if a specific key exists \"NetIncome\" %in% valid_income_keys #> [1] TRUE"},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_modules.html","id":null,"dir":"Reference","previous_headings":"","what":"Data file containing possible Yahoo Finance API modules — valid_modules","title":"Data file containing possible Yahoo Finance API modules — valid_modules","text":"dataset containing possible modules can requested Yahoo Finance API. module represents specific type financial data can retrieved ticker.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_modules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data file containing possible Yahoo Finance API modules — valid_modules","text":"","code":"valid_modules"},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_modules.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data file containing possible Yahoo Finance API modules — valid_modules","text":"character vector containing 33 possible API modules descriptions","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_modules.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data file containing possible Yahoo Finance API modules — valid_modules","text":"Yahoo Finance API","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_modules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data file containing possible Yahoo Finance API modules — valid_modules","text":"modules include: assetProfile - Summary profile company officers balanceSheetHistory - Annual balance sheet data balanceSheetHistoryQuarterly - Quarterly balance sheet data calendarEvents - Future earnings dates cashFlowStatementHistory - Annual cash flow statement data cashFlowStatementHistoryQuarterly - Quarterly cash flow statement data defaultKeyStatistics - Key performance indicators (PE, enterprise value, EPS, etc.) earnings - Earnings history earningsHistory - Historical earnings data earningsTrend - Earnings trend data esgScores - Environmental, social, governance scores financialData - Financial KPIs (revenue, margins, cash flow, etc.) institutionOwnership - Institutional ownership data insiderHolders - Insider holdings data insiderTransactions - Insider transaction data ...","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/valid_modules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data file containing possible Yahoo Finance API modules — valid_modules","text":"","code":"# View all possible modules data(valid_modules) head(valid_modules) #> [1] \"assetProfile\"                      \"balanceSheetHistory\"               #> [3] \"balanceSheetHistoryQuarterly\"      \"calendarEvents\"                    #> [5] \"cashFlowStatementHistory\"          \"cashFlowStatementHistoryQuarterly\"  # Check if a specific module exists \"financialData\" %in% valid_modules #> [1] TRUE"},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate frequency — validate_frequency","title":"Validate frequency — validate_frequency","text":"Validate frequency","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate frequency — validate_frequency","text":"","code":"validate_frequency(frequency)"},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate frequency — validate_frequency","text":"frequency character string specifying frequency (annual, quarterly)","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate frequency — validate_frequency","text":"validated frequency","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate date interval — validate_interval","title":"Validate date interval — validate_interval","text":"Validate date interval","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate date interval — validate_interval","text":"","code":"validate_interval(interval)"},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate date interval — validate_interval","text":"interval character string specifying interval (1m, 2m, 5m, 15m, 30m, 60m, 90m, 1h, 1d, 5d, 1wk, 1mo, 3mo)","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate date interval — validate_interval","text":"validated interval","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate date period — validate_period","title":"Validate date period — validate_period","text":"Validate date period","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate date period — validate_period","text":"","code":"validate_period(period)"},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate date period — validate_period","text":"period character string specifying period (1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max)","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate date period — validate_period","text":"validated period","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_tickers.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Yahoo Finance Ticker Symbols — validate_tickers","title":"Validate Yahoo Finance Ticker Symbols — validate_tickers","text":"function validates whether given ticker symbols valid making API request Yahoo Finance's validation endpoint.","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_tickers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Yahoo Finance Ticker Symbols — validate_tickers","text":"","code":"validate_tickers(symbols = NULL)"},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_tickers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Yahoo Finance Ticker Symbols — validate_tickers","text":"symbols character vector ticker symbols validate","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_tickers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Yahoo Finance Ticker Symbols — validate_tickers","text":"tibble validation results symbol","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/validate_tickers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Yahoo Finance Ticker Symbols — validate_tickers","text":"","code":"if (FALSE) { # \\dontrun{ validate_tickers(c(\"AAPL\", \"MSFT\", \"GOOG\")) } # }"},{"path":"https://gacolitti.github.io/yfinancer/reference/yf_base_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Constants for Yahoo Finance API — yf_base_url","title":"Constants for Yahoo Finance API — yf_base_url","text":"Constants Yahoo Finance API","code":""},{"path":"https://gacolitti.github.io/yfinancer/reference/yf_base_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constants for Yahoo Finance API — yf_base_url","text":"","code":"yf_base_url"},{"path":"https://gacolitti.github.io/yfinancer/reference/yf_base_url.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Constants for Yahoo Finance API — yf_base_url","text":"object class character length 1.","code":""},{"path":"https://gacolitti.github.io/yfinancer/news/index.html","id":"yfinancer-development-version","dir":"Changelog","previous_headings":"","what":"yfinancer (development version)","title":"yfinancer (development version)","text":"Added NEWS.md file track changes package.","code":""}]
